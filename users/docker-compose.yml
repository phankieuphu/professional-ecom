
version: '3.8'
services:
  database:
    container_name: mysql
    image: mysql:8
    restart: always
    ports:
      - "3306:3306"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: user_service
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_pass
    networks:
      - app-networks
    healthcheck:
      test: [
        "CMD",
        "mysqladmin",
        "ping",
        "-h", "localhost",
        "-u", "app_user",
        "-papp_pass"
      ]
      interval: 5s
      timeout: 3s
      retries: 5
  cache:
    container_name: redis
    image: redis:latest
    environment:
      - REDIS_PASSWORD=123456
    ports:
      - "6379:6379"
    restart: always
  app:
    container_name: user_service
    build: .
    restart: always
    depends_on:
      database:
        condition: service_healthy
    environment:
      DATABASE_URL: "app_user:app_pass@tcp(database:3306)/user_service?charset=utf8mb4&parseTime=True&loc=Local"
    networks:
      - app-networks
  # kafka:
  #   image: apache/kafka:latest
  #   container_name: broker
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_NODE_ID: 1
  #     KAFKA_PROCESS_ROLES: broker, controller
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9092
  #     KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9092
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - kafka-net
  #   restart: always

volumes:
  mysql_data:
networks:
  app-networks:
    driver: bridge
  # kafka-net:
  #   driver: bridge
